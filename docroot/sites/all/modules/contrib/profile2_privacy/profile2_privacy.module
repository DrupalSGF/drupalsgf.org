<?php

/**
 * Implements hook_permission()
 */
function profile2_privacy_permission() { // say that three times fast
  // setup general permissions
  $perms = array(
    'administer profile2 privacy' => array(
      'title' => t('Administer Profile2 Privacy Levels'),
      'description' => t('Create, edit and delete privacy levels.'),
    )
  );

  return $perms;
} // profile2_privacy_permission()

/**
 * Implements hook_field_info()
 */
function profile2_privacy_field_info() {
  return array(
    'profile2_privacy' => array(
      'label' => t('Profile2 Privacy'),
      'description' => t('This field stores a profile2 privacy field level.'),
      'default_widget' => 'profile2_privacy_widget',
      'default_formatter' => 'profile2_privacy_formatter',
    ),
  );
} // profile2_privacy_field_info()

/**
 * Implements hook_field_widget_info()
 */
function profile2_privacy_field_widget_info() {
  return array(
    'profile2_privacy_widget' => array(
      'label' => t('Profile2 Privacy'),
      'description' => t('This field stores a profile2 privacy field level.'),
      'field types' => array('profile2_privacy'),
    ),
  );
} // profile2_privacy_field_widget_info()

/**
 * Implements hook_field_formatter_info()
 */
function profile2_privacy_field_formatter_info() {
  return array(
    'profile2_privacy_formatter' => array(
      'label' => t('Profile2 Privacy'),
      'description' => t('This field stores a profile2 privacy field level.'),
      'field types' => array('profile2_privacy'),
    ),
  );
} // profile2_privacy_field_widget_info()

/**
 * Implements hook_field_widget_form()
 */
function profile2_privacy_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $levels = profile2_privacy_get_levels();
  $options = array();
  foreach ($levels as $level) {
    $options[$level['pplid']] = t('!title <em>(!description)</em>', array('!title' => $level['title'], '!description' => $level['description']));
  } // foreach

  $element += array(
    '#type' => 'radios',
    '#options' => $options,
    '#default_value' => isset($items[$delta]['pplid'])? $items[$delta]['pplid'] : '',
  );
 
  return $element;
} // profile2_privacy_field_widget_form()

/**
 * Implements hook_field_is_empty()
 */
function profile2_privacy_field_is_empty($item, $field) {
  if ($field['type'] == 'profile2_privacy') {
    return (empty($item) || !is_numeric($item) || $item < 1)? TRUE : FALSE;
  }
} // profile2_privacy_field_is_empty()

/**
 * Implementation of hook_field_access()
 */
function profile2_privacy_field_access($op, $field, $entity_type, $entity, $account) {

  if ($op == 'view' && $entity_type == 'profile2' && !empty($entity)) {
    // admin and entity user always have access
    if ($account->uid == 1 || (isset($account->uid) && isset($entity->uid) && $account->uid == $entity->uid)) return TRUE;

    // ensure that we have roles loaded
    if (isset($account->uid) && !isset($account->roles)) $account = user_load($account->uid);

    // determine what privacy level the views user has selected.
    $privacy_fields = array_keys(field_read_fields(array('type' => 'profile2_privacy')));
    $roles = array();
    foreach ($privacy_fields as $privacy_field) {
      if (isset($entity->{$privacy_field})) {
        $pplid = isset($entity->{$privacy_field}[LANGUAGE_NONE][0]['pplid'])? $entity->{$privacy_field}[LANGUAGE_NONE][0]['pplid'] : 0;
        $roles += profile2_privacy_get_field_roles($pplid, $field['id']);
      }
    }

    // determine which roles can view this field
    $allowed_roles = array_intersect($roles, array_keys($account->roles));

    return (count($allowed_roles))? TRUE : FALSE;
  } // if profile2 entity_type
  return TRUE;
} // profile2_privacy_field_access()

/**
 * Implements hook_profile2_view()
 * determines if all the fields in the profile are hidden, then show access denied for the entire page
 */
function profile2_privacy_profile2_view($profile, $view_mode, $langcode) {
  global $user;

  // get the fields on this profile type
  $fields = field_info_instances('profile2', $profile->type);
  $accessible_fields = array();
  foreach ($fields as $field_name => $field) {
    // check each of the fields
    if (profile2_privacy_field_access('view', $field, 'profile2', $profile, $user)) {
      $accessible_fields[] = $field_name;
    } // if
  } // foreach

  // if there are no visible fields, show access denied
  if (!count($accessible_fields)) {
    // drupal_access_denied() causes a strange double load issue.
    // so we only reset the title instead of performing a real access denied.
    drupal_set_title(t('Access denied'));
  }
} // profile2_privacy_profile2_view()

/**
 * Implements hook_views_post_execute()
 */
function profile2_privacy_views_post_execute(&$view) {
  // run access control when the view base table is profile
  if (($view->base_table == 'profile' || in_array('profile', array_keys($view->relationship))) && count($view->result)) {
    global $user;

    // create view field name to actual field name map
    $field_map = array();
    foreach ($view->field as $view_field_name => $field_info) {
      if (isset($field_info->field_info['field_name'])) $field_map[$view_field_name] = $field_info->field_info;
    } // foreach view field

    foreach ($view->result as &$result) {
      foreach ($field_map as $view_field_name => $field) {
        if (isset($result->{'field_' . $view_field_name}) 
          && (isset($result->_field_data['pid']['entity']) || isset($result->_field_data['profile_users_pid']['entity']))) {

          // get the access
          $access = TRUE;
          if (isset($result->_field_data['pid']['entity'])) {
            $access = profile2_privacy_field_access('view', $field, 'profile2', $result->_field_data['pid']['entity'], $user);
          }
          else if (isset($result->_field_data['profile_users_pid']['entity'])) {
            $access = profile2_privacy_field_access('view', $field, 'profile2', $result->_field_data['profile_users_pid']['entity'], $user);
          }

          if (!$access) $result->{'field_' . $view_field_name} = array();
        } // if field and entity and access is denied
      } // foreach field 
    } // foreach result
      
  } // if profile view

} // profile2_privacy_views_post_execute()

/**
 * Implements hook_menu()
 */
function profile2_privacy_menu() {
  $items['admin/config/people/profile2_privacy'] = array(
    'title' => 'Profile2 Privacy',
    'description' => t('Administrate profile2 privacy.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('profile2_privacy_form'),
    'access arguments' => array('administer profile2 privacy'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/config/people/profile2_privacy/level/%'] = array(
    'title' => 'Profile2 Privacy Level',
    'description' => t('Add or edit profile2 privacy level'),
    'pgae callback' => 'drupal_get_form',
    'page arguments' => array('profile2_privacy_level_form'),
    'access arguments' => array('administer profile2 privacy'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
} // profile2_privacy_menu()

/**
 * profile2_privacy_form callback
 */
function profile2_privacy_form($form_state) {
  $form['rows']['#tree'] = TRUE;

  $form['add_level'] = array(
    '#markup' => '<div class="add-privacy-level">' . l(t('Add Profile2 Privacy Level'), 'admin/config/people/profile2_privacy/level/add') . '</div>',
    '#weight' => -10,
  );

  $levels = profile2_privacy_get_levels();
  foreach ($levels as $level) {
    $form['rows'][$level['pplid']] = array(
      'title' => array(
        '#markup' => $level['title'],
      ),
      'description' => array(
        '#markup' => $level['description'],
      ),
      'edit' => array(
        '#markup' => l(t('Edit'), 'admin/config/people/profile2_privacy/level/' . $level['pplid']),
      ),
      'weight' => array(
        '#type' => 'weight',
        '#default_value' => $level['weight'],
        '#attributes' => array('class' => array('weight')),
      ),
    );
  } // foreach

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );

  return $form;
} // profile2_privacy_form()

/**
 * profile2_privacy_form submit handler
 */
function profile2_privacy_form_submit($form, &$form_state) {
  if (count($form_state['values']['rows'])) {
    foreach ($form_state['values']['rows'] as $pplid => $values) {
      profile2_privacy_level_update($pplid, FALSE, FALSE, $values['weight']);
    } // foreach
  }
}

/**
 * Implements hook_theme()
 */
function profile2_privacy_theme() {
  return array(
    'profile2_privacy_form' => array(
      'render element' => 'form',
    ),
  );
} // profile2_privacy_theme()

/**
 * create theme function
 */
function theme_profile2_privacy_form($form) {
  $form = array_shift($form);

  $rows = array();
  foreach ($form['rows'] as $id => $row) {
    if (!intval($id)) continue;
    $rows[] = array(
      'data' => array(
        drupal_render($row['title']),
        drupal_render($row['description']),
        drupal_render($row['edit']),
        drupal_render($row['weight']),
      ), 
      'class' => array('draggable'),
    );
    // ensure that we're don't print these later
    hide($form['rows'][$id]);
  } // foreach

  $header = array(
    t('Privacy Level'),
    t('Description'),
    t('Edit'),
    t('Weight'),
  );
  $attributes = array('id' => 'profile2_privacy_form_table');

  drupal_add_tabledrag('profile2_privacy_form_table', 'order', 'sibling', 'weight');
  //$output = theme('table', array('header' => $header, 'rows' => $rows, 'attributes' => $attributes));
  $form['rows'] = array(
    '#markup' => theme('table', array('header' => $header, 'rows' => $rows, 'attributes' => $attributes)),
  );

  return drupal_render_children($form);
}

/**
 * privacy level form
 */
function profile2_privacy_level_form($form_state) {
  // get info about the level
  $level_id = arg(5);
  if (is_numeric($level_id)) $level = profile2_privacy_get_levels($level_id);

  // setup the level information form
  $form['pplid'] = array(
    '#type' => 'hidden',
    '#value' => (!empty($level['pplid']))? $level['pplid'] : 0,
  );
  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Privacy Level Title'),
    '#description' => t('The name of the privacy level.'),
    '#maxlength' => 64,
    '#default_value' => (!empty($level['title']))? $level['title'] : '',
    '#required' => TRUE,
  );
  $form['description'] = array(
    '#type' => 'textfield',
    '#title' => t('Description'),
    '#description' => t('Describe the privacy level.'),
    '#maxlength' => 128,
    '#default_value' => (!empty($level['description']))? $level['description'] : '',
  );

  // setup the role/fields information form
  $roles = user_roles();
  $fields = field_info_fields();

  $form['role_fields'] = array('#type' => 'vertical_tabs');
  foreach ($roles as $rid => $rolename) {
    $role = user_role_load($rid);
    if ($role === FALSE) continue; // error check the role

    $form['role_fields'][$role->name] = array(
      '#type' => 'fieldset',
      '#title' => $role->name,
    );

    foreach ($fields as $key => $field) {
      if (in_array('profile2', array_keys($field['bundles']))) {
        $form['role_fields'][$role->name][$role->rid . '|' . $field['id']] = array(
          '#type' => 'checkbox',
          '#title' => $field['field_name'],
          '#description' => t('Used in: !bundles', array('!bundles' => implode(', ', $field['bundles']['profile2']))),
          '#default_value' => (isset($level['fields'][$role->rid][$field['id']]))? 1 : 0,
        );
      } // if profile field
    } // foreach field

  } // foreach role

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );

  if (!empty($level)) {
    $form['delete'] = array(
      '#type' => 'submit',
      '#value' => t('Delete'),
    );
  }
  
  return $form;
} // profile2_privacy_level_form()

/**
 * profile2_privacy_level_form submit handler
 */
function profile2_privacy_level_form_submit($form, &$form_state) {
  $values = $form_state['values'];
  // delete
  if ($form_state['clicked_button']['#value'] == t('Delete') && is_numeric($values['pplid']) && $values['pplid'] > 0) {
    profile2_privacy_level_delete($values['pplid']);
    $form_state['redirect'] = 'admin/config/people/profile2_privacy';
  } // if delete
  // update
  else if ($form_state['clicked_button']['#value'] == t('Save') && is_numeric($values['pplid']) && $values['pplid'] > 0) {
    profile2_privacy_level_update($values['pplid'], $values['title'], $values['description']);
    profile2_privacy_fields_delete($values['pplid']);
    foreach ($values as $field => $value) {
      if (preg_match('/^(\d+)\|(\d+)$/', $field, $matches) && $value == 1) {
        profile2_privacy_fields_add($values['pplid'], $matches[1], $matches[2]);
      }
    }
  }
  // add
  else if ($form_state['clicked_button']['#value'] == t('Save') && $values['pplid'] == 0) {
    $values['pplid'] = profile2_privacy_level_add($values['title'], $values['description']);
    if ($values['pplid']) {
      foreach ($values as $field => $value) {
        if (preg_match('/^(\d+)\|(\d+)$/', $field, $matches) && $value == 1) {
          profile2_privacy_fields_add($values['pplid'], $matches[1], $matches[2]);
        }
      }
    }
    $form_state['redirect'] = 'admin/config/people/profile2_privacy';
  }
} // profile2_privacy_level_form_submit()

/**
 * helper function to get levels
 */
function profile2_privacy_get_levels($pplid = FALSE) {
  $query = db_select('profile2_privacy_levels', 'ppl')->fields('ppl', array('pplid', 'title', 'description', 'weight'));
  if ($pplid) $query->condition('ppl.pplid', $pplid);
  $results = $query->orderBy('weight')->orderBy('title')->execute();

  $return = array();

  foreach ($results as $record) {
    $level = array(
      'pplid' => $record->pplid,
      'title' => $record->title,
      'description' => $record->description,
      'weight' => $record->weight,
    );

    if ($pplid) {
      $results2 = db_select('profile2_privacy_fields', 'ppf')
        ->fields('ppf', array('rid', 'fiid'))
        ->condition('ppf.pplid', $pplid)
        ->execute();
      foreach ($results2 as $record2) {
        $level['fields'][$record2->rid][$record2->fiid] = $record2->fiid;
      }
    } // if $roles   

    $return[] = $level;
  }

  if ($pplid) $return = array_shift($return);
  return $return;
} // profile2_privacy_get_levels()

function profile2_privacy_get_field_roles($pplid, $fiid) {
  return db_select('profile2_privacy_fields', 'ppf')
    ->fields('ppf', array('rid'))
    ->condition('pplid', $pplid)
    ->condition('fiid', $fiid)
    ->execute()
    ->fetchCol();
}

/**
 * Database helper function 
 */
function profile2_privacy_level_add($title, $description, $weight = 0) {
  $pplid = db_insert('profile2_privacy_levels')
    ->fields(array(
      'title' => $title,
      'description' => $description,
      'weight' => $weight,
    ))
    ->execute();
  return $pplid;
} // profile2_privacy_level_add()

function profile2_privacy_level_update($pplid, $title = FALSE, $description = FALSE, $weight = FALSE) {
  $updates = array();
  if ($title !== FALSE) $updates['title'] = $title;
  if ($description !== FALSE) $updates['description'] = $description;
  if ($weight !== FALSE) $updates['weight'] = $weight;

  if (count($updates)) {
    db_update('profile2_privacy_levels')
      ->fields($updates)
      ->condition('pplid', $pplid)
      ->execute();
  } // if we have fields to update
} // profile2_privacy_level_update()

function profile2_privacy_level_delete($pplid) {
  db_delete('profile2_privacy_levels')
    ->condition('pplid', $pplid)
    ->execute();
  profile2_privacy_fields_delete($pplid);
} // profile2_privacy_level_delete()

function profile2_privacy_fields_add($pplid, $rid, $fiid) {
  db_insert('profile2_privacy_fields')
    ->fields(array(
      'pplid' => $pplid,
      'rid' => $rid,
      'fiid' => $fiid,
    ))
    ->execute();
} // profile2_privacy_fields_add()

function profile2_privacy_fields_delete($pplid) {
  db_delete('profile2_privacy_fields')
    ->condition('pplid', $pplid)
    ->execute();
} // profile2_privacy_fields_delete()
